@page "/index-clientes"
@inject HttpClient _http
@inject IJSRuntime jsRuntime


<h3>Cliente</h3>


<div class="row">
    <div class="offset-9 col-3 mb-3">
        <a href="crear-cliente" class="btn btn-secondary d-block mx-auto btn-lg">
            <i class="bi bi-file-plus-fill"></i> Nuevo Cliente
        </a>
    </div>
</div>

@if (Clientes is null)
{
    <text>Cargando...</text>
}
else if (Clientes.Count == 0)
{
    <text>No hay personas en la base de Datos</text>
}
else
{
    <div class="row">
        <div class="offset-12">
            <div class="card border">
                <div class="card-header bg-dark">
                    <h3 class="text-white"><strong>Lista de Usuarios</strong></h3>
                </div>
                <div class="card-body">
                    <div class="table-responsive">
                        <table class="table table-bordered" id="tblClientes" cellspacing="0">
                            <thead>
                                <tr>
                                    <th>IdCliente</th>
                                    <th>Categoria</th>
                                    <th>NombreCliente</th>
                                    <th>ApellidoCliente</th>
                                    <th>Acciones</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var elemento in Clientes)
                                {
                                    <tr>
                                        <td>@elemento.IdCliente</td>
                                        <td>@elemento.Categoria</td>
                                        <td>@elemento.NombreCliente</td>
                                        <td>@elemento.ApellidoCliente</td>
                                        <td>
                                            <a class="btn btn-warning" href="editar-cliente/@elemento.IdCliente.ToString()"><i class="bi bi-pencil-fill"></i>Editar</a>
                                            <a class="btn btn-secondary" asp-action="Detalle" asp-route-id="@elemento.IdCliente"><i class="bi bi-info-circle-fill"></i>Detalle</a>
                                            <a class="btn btn-danger" onclick="@(()=> BorrarCliente(elemento.IdCliente))"><i class="bi bi-eraser-fill"></i>Eliminar</a>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>


}


@code {
    public List<Cliente>? Clientes { get; set; }
    public IJSObjectReference? Modulo;

    protected override async Task OnInitializedAsync()
    {
        await CargarPersonas();

    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (Clientes is null)
            {
                await CargarPersonas();
            }

            Modulo = await jsRuntime.InvokeAsync<IJSObjectReference>("import", "/js/DataTable.js");

            await Modulo.InvokeVoidAsync("inicializarDataTables", "tblClientes");

        }
    }

    async Task CargarPersonas()
    {
        Clientes = JObject.Parse(await _http.GetStringAsync("http://localhost:5269/api/Cliente/Lista")).SelectToken("response")?.ToObject<List<Cliente>>();
    }
    async Task BorrarCliente(int IdCliente)
    {
        var clienteSelected = Clientes?.FirstOrDefault(x => x.IdCliente == IdCliente);

        if (await Modulo!.InvokeAsync<bool>("CustomConfirm", "Confirmar", $"Desea eliminar a {clienteSelected?.NombreCliente}", "warning"))
        {
            await _http.DeleteAsync($"http://localhost:5269/api/Cliente/Eliminar/{IdCliente}");
            await CargarPersonas();
            StateHasChanged();
        }
    }
}
